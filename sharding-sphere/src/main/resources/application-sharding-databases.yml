spring:
  shardingsphere:
    # 1. 数据源
    datasource:
      names: ds-0,ds-1
      # 注意：YML 不能使用下划线
      ds-0:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/demo_ds_0?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: root
        password: 123456
      ds-1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/demo_ds_1?serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: root
        password: 123456

    # 2. 分片
    sharding:
      # 绑定表。避免笛卡尔积关联查询。绑定表的分片键规则要一致。
      binding-tables: t_order,t_order_item
      # 广播表。指每个数据源都有且数据都一样的表，适用于数据量不大且需要与海量数据的表进行关联查询的场景，例如：字典表、路由表。
      broadcast-tables: t_address

      # 数据源分片策略（先测试分库，再测分表）
      default-database-strategy:
        # inline grammar：
        # ${ expression } / $->{ expression } (recommend)
        # ${begin..end}表示范围区间
        # ${[unit1, unit2, unit_x]}表示枚举值
        inline:
          algorithm-expression: ds-$->{user_id % 2}
          sharding-column: user_id
      # 表分片策略
      tables:
        t_order:
          actual-data-nodes: ds-$->{0..1}.t_order
          key-generator:
            column: order_id
            props:
              worker:
                id: 123
            type: SNOWFLAKE
        t_order_item:
          actual-data-nodes: ds-$->{0..1}.t_order_item
          key-generator:
            column: order_item_id
            props:
              worker:
                id: 123
            type: SNOWFLAKE
